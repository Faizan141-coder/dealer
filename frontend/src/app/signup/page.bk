'use client';

import React from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useRouter } from 'next/navigation';
import { SubmitHandler, useForm } from "react-hook-form";

// Define the schema using Zod
const schema = z.object({
  company: z.string().min(1, { message: "Company name is required" }),
  userName: z.string().min(3, { message: "Username must be at least 3 characters" }),
  password: z.string().min(8, { message: "Password must be at least 8 characters" }),
  confirmPassword: z.string(),
  firstName: z.string().min(1, { message: "First name is required" }),
  middleInitial: z.string().max(1, {message : "Only one character is required"}).optional(),
  lastName: z.string().min(1, { message: "Last name is required" }),
  phone: z.string().regex(/^\d{10}$/, { message: "Invalid phone number" }),
  email: z.string().email({ message: "Invalid email address" }),
  billingAddress: z.object({
    line1: z.string().min(1, { message: "Address line 1 is required" }),
    line2: z.string().optional(),
    city: z.string().min(1, { message: "City is required" }),
    state: z.string().min(1, { message: "State is required" }),
    country: z.string().min(1, { message: "Country is required" }),
    zipCode: z.string().regex(/^\d{5}(-\d{4})?$/, { message: "Invalid ZIP code" }),
    residential: z.boolean()
  }),
  sameAsBillingAddress: z.boolean(),
  shippingAddress: z.object({
    line1: z.string().min(1, { message: "Address line 1 is required" }),
    line2: z.string().optional(),
    city: z.string().min(1, { message: "City is required" }),
    state: z.string().min(1, { message: "State is required" }),
    country: z.string().min(1, { message: "Country is required" }),
    zipCode: z.string().regex(/^\d{5}(-\d{4})?$/, { message: "Invalid ZIP code" }),
    residential: z.boolean()
  }).optional(),
  taxId: z.string().optional(),
  exportLicenseNumber: z.string().optional(),
  taxState: z.string().min(1, { message: "Tax state is required" }),
  preferredLanguage: z.string().min(1, { message: "Preferred language is required" })
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
}).refine((data) => {
  if (data.sameAsBillingAddress) {
    return true;
  }
  return !!data.shippingAddress;
}, {
  message: "Shipping address is required when not the same as billing address",
  path: ["shippingAddress"],
});

// Infer the type from the schema
type FormData = z.infer<typeof schema>;

const RegistrationForm: React.FC = () => {
  const router = useRouter();
  const { register, handleSubmit, formState: { errors }, watch } = useForm<FormData>({
    resolver: zodResolver(schema),
    mode: "onChange" // This enables real-time validation
  });

  const password = watch("password");
  const sameAsBillingAddress = watch('sameAsBillingAddress');

  const onSubmit: SubmitHandler<FormData> = async (data) => {
    console.log('Registration data:', data);

    try {
      const response = await fetch('/api/auth/users/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        console.log('Registration successful');
        router.push('/login');
      } else {
        const errorData = await response.json();
        console.error('Registration failed:', errorData);
      }
    } catch (error) {
      console.error('Registration error:', error);
    }
  };

  return (
      <form onSubmit={handleSubmit(onSubmit)} className="max-w-2xl mt-8 mx-auto p-6 bg-white shadow-md rounded-lg space-y-6">
        <h2 className="text-2xl font-semibold text-center">Register</h2>

        <div>
          <label htmlFor="company" className="block text-sm font-medium text-gray-700">Company</label>
          <input
              type="text"
              id="company"
              {...register('company')}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
          {errors.company && <p className="mt-1 text-sm text-red-600">{errors.company.message}</p>}
        </div>

        <div className="grid grid-cols-1 gap-6 sm:grid-cols-3">
          <div>
            <label htmlFor="userName" className="block text-sm font-medium text-gray-700">Username</label>
            <input
                type="text"
                id="userName"
                {...register('userName')}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            {errors.userName && <p className="mt-1 text-sm text-red-600">{errors.userName.message}</p>}
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
            <input
                type="password"
                id="password"
                {...register('password')}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            {errors.password && <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>}
          </div>
          <div>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">Confirm Password</label>
            <input
                type="password"
                id="confirmPassword"
                {...register('confirmPassword', {
                  validate: (value) => value === password || "Passwords do not match"
                })}
                className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            />
            {errors.confirmPassword && <p className="mt-1 text-sm text-red-600">{errors.confirmPassword.message}</p>}
          </div>
        </div>

        <div>
          <h3 className="text-lg font-medium leading-6 text-gray-900">Contact Information</h3>
          <div className="mt-2 grid grid-cols-1 gap-6 sm:grid-cols-6">
            <div className="sm:col-span-2">
              <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">First Name</label>
              <input
                  type="text"
                  id="firstName"
                  {...register('firstName')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.firstName && <p className="mt-1 text-sm text-red-600">{errors.firstName.message}</p>}
            </div>
            <div className="sm:col-span-1">
              <label htmlFor="middleInitial" className="block text-sm font-medium text-gray-700">MI</label>
              <input
                  type="text"
                  id="middleInitial"
                  {...register('middleInitial')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.middleInitial && <p className="mt-1 text-sm text-red-600">{errors.middleInitial.message}</p>}
            </div>
            <div className="sm:col-span-3">
              <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">Last Name</label>
              <input
                  type="text"
                  id="lastName"
                  {...register('lastName')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.lastName && <p className="mt-1 text-sm text-red-600">{errors.lastName.message}</p>}
            </div>
            <div className="sm:col-span-3">
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700">Phone #</label>
              <input
                  type="tel"
                  id="phone"
                  {...register('phone')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.phone && <p className="mt-1 text-sm text-red-600">{errors.phone.message}</p>}
            </div>
            <div className="sm:col-span-3">
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
              <input
                  type="email"
                  id="email"
                  {...register('email')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
              {errors.email && <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>}
            </div>
          </div>
        </div>

        <div>
          <h3 className="text-lg font-medium leading-6 text-gray-900">Address Information</h3>
          <div className="mt-2 space-y-6">
            <div>
              <h4 className="text-md font-medium text-gray-700">Billing Address</h4>
              <div className="mt-2 grid grid-cols-1 gap-6 sm:grid-cols-6">
                <div className="sm:col-span-3">
                  <label htmlFor="billingLine1" className="block text-sm font-medium text-gray-700">Line 1</label>
                  <input
                      type="text"
                      id="billingLine1"
                      {...register('billingAddress.line1')}
                      className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {errors.billingAddress?.line1 && <p className="mt-1 text-sm text-red-600">{errors.billingAddress.line1.message}</p>}
                </div>
                <div className="sm:col-span-3">
                  <label htmlFor="billingLine2" className="block text-sm font-medium text-gray-700">Line 2</label>
                  <input
                      type="text"
                      id="billingLine2"
                      {...register('billingAddress.line2')}
                      className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                </div>
                <div className="sm:col-span-2">
                  <label htmlFor="billingCity" className="block text-sm font-medium text-gray-700">City</label>
                  <input
                      type="text"
                      id="billingCity"
                      {...register('billingAddress.city')}
                      className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {errors.billingAddress?.city && <p className="mt-1 text-sm text-red-600">{errors.billingAddress.city.message}</p>}
                </div>
                <div className="sm:col-span-2">
                  <label htmlFor="billingState" className="block text-sm font-medium text-gray-700">State</label>
                  <input
                      type="text"
                      id="billingState"
                      {...register('billingAddress.state')}
                      className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {errors.billingAddress?.state && <p className="mt-1 text-sm text-red-600">{errors.billingAddress.state.message}</p>}
                </div>
                <div className="sm:col-span-2">
                  <label htmlFor="billingZipCode" className="block text-sm font-medium text-gray-700">ZIP Code</label>
                  <input
                      type="text"
                      id="billingZipCode"
                      {...register('billingAddress.zipCode')}
                      className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {errors.billingAddress?.zipCode && <p className="mt-1 text-sm text-red-600">{errors.billingAddress.zipCode.message}</p>}
                </div>
                <div className="sm:col-span-3">
                  <label htmlFor="billingCountry" className="block text-sm font-medium text-gray-700">Country</label>
                  <input
                      type="text"
                      id="billingCountry"
                      {...register('billingAddress.country')}
                      className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                  />
                  {errors.billingAddress?.country && <p className="mt-1 text-sm text-red-600">{errors.billingAddress.country.message}</p>}
                </div>
                <div className="sm:col-span-3">
                  <label className="flex items-center">
                    <input
                        type="checkbox"
                        {...register('billingAddress.residential')}
                        className="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-offset-0 focus:ring-indigo-200 focus:ring-opacity-50"
                    />
                    <span className="ml-2 text-sm text-gray-700">Residential</span>
                  </label>
                </div>
              </div>
            </div>

            <div>
              <h4 className="text-md font-medium text-gray-700">Shipping Address</h4>
              <div className="mt-2">
                <label className="inline-flex items-center">
                  <input
                      type="checkbox"
                      {...register('sameAsBillingAddress')}
                      className="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-offset-0 focus:ring-indigo-200 focus:ring-opacity-50"
                  />
                  <span className="ml-2 text-sm text-gray-700">Same as Billing Address</span>
                </label>
              </div>
              {!sameAsBillingAddress && (
                  <div className="mt-2 grid grid-cols-1 gap-6 sm:grid-cols-6">
                    <div className="sm:col-span-3">
                      <label htmlFor="shippingLine1" className="block text-sm font-medium text-gray-700">Line 1</label>
                      <input
                          type="text"
                          id="shippingLine1"
                          {...register('shippingAddress.line1')}
                          className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                      {errors.shippingAddress?.line1 && <p className="mt-1 text-sm text-red-600">{errors.shippingAddress.line1.message}</p>}
                    </div>
                    <div className="sm:col-span-3">
                      <label htmlFor="shippingLine2" className="block text-sm font-medium text-gray-700">Line 2</label>
                      <input
                          type="text"
                          id="shippingLine2"
                          {...register('shippingAddress.line2')}
                          className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                    </div>
                    <div className="sm:col-span-2">
                      <label htmlFor="shippingCity" className="block text-sm font-medium text-gray-700">City</label>
                      <input
                          type="text"
                          id="shippingCity"
                          {...register('shippingAddress.city')}
                          className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                      {errors.shippingAddress?.city && <p className="mt-1 text-sm text-red-600">{errors.shippingAddress.city.message}</p>}
                    </div>
                    <div className="sm:col-span-2">
                      <label htmlFor="shippingState" className="block text-sm font-medium text-gray-700">State</label>
                      <input
                          type="text"
                          id="shippingState"
                          {...register('shippingAddress.state')}
                          className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                      {errors.shippingAddress?.state && <p className="mt-1 text-sm text-red-600">{errors.shippingAddress.state.message}</p>}
                    </div>
                    <div className="sm:col-span-2">
                      <label htmlFor="shippingZipCode" className="block text-sm font-medium text-gray-700">ZIP Code</label>
                      <input
                          type="text"
                          id="shippingZipCode"
                          {...register('shippingAddress.zipCode')}
                          className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                      {errors.shippingAddress?.zipCode && <p className="mt-1 text-sm text-red-600">{errors.shippingAddress.zipCode.message}</p>}
                    </div>
                    <div className="sm:col-span-3">
                      <label htmlFor="shippingCountry" className="block text-sm font-medium text-gray-700">Country</label>
                      <input
                          type="text"
                          id="shippingCountry"
                          {...register('shippingAddress.country')}
                          className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
                      />
                      {errors.shippingAddress?.country && <p className="mt-1 text-sm text-red-600">{errors.shippingAddress.country.message}</p>}
                    </div>
                    <div className="sm:col-span-3">
                      <label className="flex items-center">
                        <input
                            type="checkbox"
                            {...register('shippingAddress.residential')}
                            className="rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-offset-0 focus:ring-indigo-200 focus:ring-opacity-50"
                        />
                        <span className="ml-2 text-sm text-gray-700">Residential</span>
                      </label>
                    </div>
                  </div>
              )}
            </div>
          </div>
        </div>

        <div>
          <h3 className="text-lg font-medium leading-6 text-gray-900">Tax Information</h3>
          <div className="mt-2 grid grid-cols-1 gap-6 sm:grid-cols-3">
            <div>
              <label htmlFor="taxId" className="block text-sm font-medium text-gray-700">Tax ID #</label>
              <input
                  type="text"
                  id="taxId"
                  {...register('taxId')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
            </div>
            <div>
              <label htmlFor="exportLicenseNumber" className="block text-sm font-medium text-gray-700">Export License #</label>
              <input
                  type="text"
                  id="exportLicenseNumber"
                  {...register('exportLicenseNumber')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              />
            </div>
            <div>
              <label htmlFor="taxState" className="block text-sm font-medium text-gray-700">Tax State</label>
              <select
                  id="taxState"
                  {...register('taxState')}
                  className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                <option value="">Select a state</option>
                <option value="AL">Alabama</option>
                <option value="AK">Alaska</option>
                {/* Add other state options */}
              </select>
              {errors.taxState && <p className="mt-1 text-sm text-red-600">{errors.taxState.message}</p>}
            </div>
          </div>
        </div>

        <div>
          <label htmlFor="preferredLanguage" className="block text-sm font-medium text-gray-700">Preferred Language</label>
          <select
              id="preferredLanguage"
              {...register('preferredLanguage')}
              className="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
          >
            <option value="">Select a Language</option>
            <option value="en">English</option>
            <option value="es">Spanish</option>
            {/* Add other language options */}
          </select>
          {errors.preferredLanguage && <p className="mt-1 text-sm text-red-600">{errors.preferredLanguage.message}</p>}
        </div>

        <button
            type="submit"
            className="w-full bg-indigo-600 text-white py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        >
          Register
        </button>
      </form>
  );
};

export default RegistrationForm;